<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GitHub+Hexo搭建博客</title>
      <link href="/2023/01/08/hexo-blog/"/>
      <url>/2023/01/08/hexo-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li>GitHub</li><li>Hexo</li><li>Node.js</li><li>Git</li><li>这里使用butterfly主题</li><li>markdown编辑器</li></ul><hr><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><blockquote><p class="p1">&emsp;&emsp;站点运行方式为在本地编写好markdown文档后，由hexo生成静态页面，然后上传到GitHub-page，从而实现访问</p></blockquote><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ol><li>下载安装<a href="https://nodejs.org/">Node.js</a>和<a href="https://pc.qq.com/detail/13/detail_22693.html">Git</a>，默认安装即可</li><li>Node.js安装完后在cmd中输入命令<code>node -v</code>和<code>npm -v</code>,若返回版本号则安装完成</li><li>在GitHub中新建仓库，名称为<code>GitHub名称.github.io</code>，其他保持默认即可</li></ol><h2 id="设置Git"><a href="#设置Git" class="headerlink" title="设置Git"></a>设置Git</h2><ol><li>点开git bash或cmd，设置user.name和user.email信息，与GitHub的设置保持一致<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure></li><li>生成ssh密钥文件，与GitHub实现连接<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure></li><li>密钥生成位置选择默认，点开<code>C:\Users\用户名\.ssh</code>，生成的公钥和私钥都在这里，点开GitHub设置→SSH and GPG keys，新添加ssh密钥，名称随意，并将公钥复制到这里并保存</li><li>git中输入<code>ssh git@github.com</code>，若出现<code>You&#39;ve successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed.</code>字样则表示连接成功</li></ol><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol><li>接下来安装hexo，cmd中进入要安装的文件夹，输入命令<code>npm install -g hexo-cli</code>进行安装</li><li>安装完成后使用命令<code>hexo init</code>进行初始化</li><li>输入命令<code>hexo generate</code>（可简写为<code>hexo g</code>）生成页面，<code>hexo server</code>（可简写为<code>hexo s</code>）启动本地服务，然后在浏览器中输入<code>localhost:4000</code>即可查看生成的页面</li></ol><h2 id="推送到GitHub"><a href="#推送到GitHub" class="headerlink" title="推送到GitHub"></a>推送到GitHub</h2><ol><li>打开hexo主目录，点开<code>_config.yml</code>文件，配置站点文件，在<code>deploy</code>一项中，type项填写<code>git</code>，repo项填写刚刚新建仓库的完整目录，一定要加上.git，若要同时推送到gitee则<code>换行+仓库名称+仓库地址</code>，branch项填写<code>master</code>，冒号后面要加空格<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    gitee: https://gitee.com/extra300s/extra300s.git</span><br><span class="line">    github: https://github.com/extra-300s/extra-300s.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li>保存后使用命令<code>hexo g</code>和<code>hexo d</code>推送到GitHub中，之后在浏览器中输入仓库名称.github.io即可访问页面，可能会有延迟</li></ol><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><ol><li>这里使用butterfly主题，使用命令<code>npm i hexo-theme-butterfly</code>或<code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code>下载主题，本地保存路径为<code>\hexo\themes</code></li><li>在hexo站点配置中更改主题设置，theme项更改为<code>theme: butterfly</code></li><li>重新编译后得到页面，启动本地服务即可查看页面，建议在本地页面查看无误后再上传</li></ol><h2 id="美化页面"><a href="#美化页面" class="headerlink" title="美化页面"></a>美化页面</h2><ol><li>打开<code>\hexo\_config.yml</code>hexo站点配置，site类中，title项和author项改为<code>自己的名称</code>，language项更改为<code>zh-CN</code>，timezone项更改为<code>&#39;Asia/Shanghai&#39;</code>，其他项可随意填写</li><li>剩下的配置在主题设置中，点开<code>\hexo\themes\butterfly</code>，其中<code>_config.yml</code>为主题配置文件，<code>\source\img</code>为要使用的图片等素材，要使用的素材可复制到这里</li><li>在<code>Favicon</code>类中更改头像、站点首页图片、默认子页面封面等内容，图片复制到<code>\source\img</code>中，这里图片地址填写为<code>\img\图片名称</code>，也可填写外链</li><li>subtitle类中可填写副标题，展现形式等</li><li>更多配置<a href="https://butterfly.js.org/posts/ceeb73f">查看官方文档</a></li></ol><h2 id="添加aplayer播放器"><a href="#添加aplayer播放器" class="headerlink" title="添加aplayer播放器"></a>添加aplayer播放器</h2><ol><li>使用命令<code>npm install --save hexo-tag-aplayer</code>安装</li><li>在hexo配置文件中将aplayer类中meting项改为<code>true</code>，asset_inject项保持<code>false</code></li><li>在主题配置中，aplayerInject类中的两项改为<code>true</code></li><li>在inject类中bottom项插入html<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aplayer no-destroy&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;歌曲或歌单id&quot;</span> <span class="attr">data-server</span>=<span class="string">&quot;tencent&quot;</span> <span class="attr">data-type</span>=<span class="string">&quot;playlist&quot;</span> <span class="attr">data-fixed</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-autoplay</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-volume</span>=<span class="string">&quot;0.5&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>包含参数如下<br></li></ol><table><thead><tr><th align="center">选项</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">必须值</td><td align="center">歌曲 id &#x2F; 播放列表 id &#x2F; 相册 id &#x2F; 搜索关键字</td></tr><tr><td align="center">server</td><td align="center">必须值</td><td align="center">音乐平台: netease, tencent, kugou, xiami, baidu</td></tr><tr><td align="center">type</td><td align="center">必须值</td><td align="center">song, playlist, album, search, artist</td></tr><tr><td align="center">fixed</td><td align="center">false</td><td align="center">开启固定模式</td></tr><tr><td align="center">mini</td><td align="center">false</td><td align="center">开启迷你模式</td></tr><tr><td align="center">loop</td><td align="center">all</td><td align="center">列表循环模式：all, one,none</td></tr><tr><td align="center">order</td><td align="center">list</td><td align="center">列表播放模式：list, random</td></tr><tr><td align="center">volume</td><td align="center">0.7</td><td align="center">播放器音量</td></tr><tr><td align="center">lrctype</td><td align="center">0</td><td align="center">歌词格式类型</td></tr><tr><td align="center">listfolded</td><td align="center">false</td><td align="center">指定音乐播放列表是否折叠</td></tr><tr><td align="center">storagename</td><td align="center">metingjs</td><td align="center">LocalStorage 中存储播放器设定的键名</td></tr><tr><td align="center">autoplay</td><td align="center">true</td><td align="center">自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td align="center">mutex</td><td align="center">true</td><td align="center">该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td align="center">listmaxheight</td><td align="center">340px</td><td align="center">播放列表的最大长度</td></tr><tr><td align="center">preload</td><td align="center">auto</td><td align="center">音乐文件预载入模式，可选项：none, metadata, auto</td></tr><tr><td align="center">theme</td><td align="center">#ad7a86</td><td align="center">播放器风格色彩设置</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量下载b站视频</title>
      <link href="/2022/12/29/%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BDb%E7%AB%99%E8%A7%86%E9%A2%91/"/>
      <url>/2022/12/29/%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BDb%E7%AB%99%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<p class="p1">&emsp;&emsp;由于盗版视频缘故，上传到b站的考研教程视频总是频频下架，无奈只能学习一下怎么批量下载b站上的视频</p><br><p class="p2">&emsp;&emsp;解析视频的插件和网站有很多，但要批量下载分p视频的话需要一个一个点击会很麻烦，硕鼠批量下载需要会员，常规下载也会很慢，因此python视频下载神器you-get在此时便显得非常有用，能够保证在下载速度的前提下实现自动批量下载，若有云服务器的加持下可实现24H全天候下载（完美）</p><hr><ol><li>首先是安装you-get库（这里我使用阿里云作为下载平台）<br><code>pip3 install you-get</code></li><li>命令行直接输入you-get即可查看使用参数，一般来讲会用到以下参数：-i查看视频信息（分辨率、视频格式、大小等）、-o下载到指定路径（直接下载的话会下载到当前路径）、分p视频–playlist下载全部分p<br><img src="/img/you-get.png" title="you-get"></li><li>若在命令行直接下载you-get就会自动按顺序下载视频，当然是单线程，多开几个窗口就能实现多线程下载，但未免有些麻烦，因此多线程下载脚本是必不可少的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> you_get</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download1080</span>(<span class="params">count,url</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;thread &quot;</span>+ <span class="built_in">str</span>(count) +<span class="string">&quot; is running&quot;</span>)</span><br><span class="line">        os.system(<span class="string">&quot;you-get --format=dash-flv &quot;</span>+url)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download720</span>(<span class="params">count,url</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;thread &quot;</span>+ <span class="built_in">str</span>(count) +<span class="string">&quot; is running&quot;</span>)</span><br><span class="line">        os.system(<span class="string">&quot;you-get --format=dash-flv720 &quot;</span>+url)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downloaddefault</span>(<span class="params">count,url</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;thread &quot;</span>+ <span class="built_in">str</span>(count) +<span class="string">&quot; is running&quot;</span>)</span><br><span class="line">        os.system(<span class="string">&quot;you-get &quot;</span>+url)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showinfo</span>(<span class="params">count,url</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;thread &quot;</span>+ <span class="built_in">str</span>(count) +<span class="string">&quot; is running&quot;</span>)</span><br><span class="line">        os.system(<span class="string">&quot;you-get -i &quot;</span>+url)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">arg</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;thread &quot;</span>+ <span class="built_in">str</span>(arg) +<span class="string">&quot; is running&quot;</span>)</span><br><span class="line">        os.system(<span class="string">&quot;ping www.baidu.com&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;thread &quot;</span>+ <span class="built_in">str</span>(arg) +<span class="string">&quot; finish&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        url_seed = <span class="string">&#x27;https://www.bilibili.com/video/BV1FZ4y1675j?p=&#x27;</span></span><br><span class="line">        thread_list = []</span><br><span class="line">        url_num = <span class="number">77</span> <span class="comment">#分p数目</span></span><br><span class="line">        thread_num = <span class="number">5</span> <span class="comment">#线程数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,url_num+<span class="number">1</span>):</span><br><span class="line">        <span class="comment">#为每个新URL创建下载线程</span></span><br><span class="line">        url = url_seed + <span class="built_in">str</span>(i)</span><br><span class="line">        t = threading.Thread(target=download720, args=(i,url))</span><br><span class="line">        <span class="comment">#加入线程池并启动</span></span><br><span class="line">        thread_list.append(t)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#print(thread_list[0])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#当线程池满时，等待线程结束</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(thread_list)&gt;thread_num:</span><br><span class="line">            <span class="comment">#移除已结束线程</span></span><br><span class="line">            thread_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> thread_list <span class="keyword">if</span> x.is_alive()]</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">           <span class="comment"># print(&quot;running threads_________&quot; + str(thread_list))</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#该脚本参考自https://zhuanlan.zhihu.com/p/365399646</span></span><br></pre></td></tr></table></figure></li><li>这里有个细节需要注意一下，在视频信息目录中可以看到，视频分为flv和mp4两种格式，实际测试flv下载速度较慢（大概100kb左右），mp4下载极快，能达到100mb左右，但b站防止视频盗用的机制导致mp4格式下载的视频和音频是分开的，需要额外合并一次，同时两种格式参数也不同，flv为<code>you-get --format=flv720 [URL]</code>，mp4为<code>you-get --format=dash-flv720 [URL]</code><br><img src="/img/%E6%A0%BC%E5%BC%8F.png"></li><li>经过查找后意外发现FFmpeg可以实现合并音视频这一功能<br><code>多媒体视频处理工具FFmpeg有非常强大的功能包括视频采集功能、视频格式转换、视频抓图、给视频加水印等。</code><br>最牛的是安装完ffmpeg后，下载完的mp4格式视频会自动合并得到正常的mp4格式视频，并自动删除源视频和音频文件（太吊了太吊了，牛逼），安装方式：<br><code>apt install FFmpeg</code></li><li>URL替换为要下载视频的地址（注意p&#x3D;后面不要加数字，数字在url_num会加上）和线程数，运行脚本就能下载了</li><li>速度嗖嗖的，下载完就能取回本地啦</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云+lnmp+wordpress配置博客</title>
      <link href="/2022/12/29/%E9%98%BF%E9%87%8C%E4%BA%91-lnmp/"/>
      <url>/2022/12/29/%E9%98%BF%E9%87%8C%E4%BA%91-lnmp/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>LNMP（linux+nginx+mysql+php）</p><h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>服务器：阿里云<br>linux：ubuntu 20.04<br>nginx：1.18.0 (Ubuntu)<br>mysql：8.0.28-0ubuntu0.20.04.3 for Linux on x86_64 ((Ubuntu))<br>php：7.4.3 (cli)</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p class="p1">&emsp;&emsp;参考教程阿里云官方文档及部分CSDN、简书、博客园等安装前现在阿里云安全策略中打开http80端口，否则无法打开网页</p><br><ol><li>更换操作系统后更新源<br><code>apt update &amp;&amp; apt upgrade -y &amp;&amp; apt-get update &amp;&amp; apt-get upgrade -y</code></li><li>安装mysql<br><code>apt install mysql-server -y</code></li><li>安装php及相关依赖项<br><code>apt install php php-mysql php-curl php-dom php-exif php-fileinfo php-fpm php-gd php-hash php-json php-mbstring php-mysqli php-openssl php-pcre php-xml libsodium -y</code><br>其中php-fpm和php-mysql必须安装（php-fpm安装后可能会顺便安装apache2，若要安装nginx则必须停用apache，否则会端口冲突，<code>ps -ef|grep apache</code>查看进程后<code>kill -9 pid</code>强制结束进程）</li><li>安装nginx<br><code>apt install nginx -y</code></li><li>配置mysql<br> 1. mysql设置启动密码<br> <code>mysql_secure_installation</code><br> 2. 按Y进行配置<br> 选择密码策略强度，0表示弱，2表示强<br> 3. 输入新密码<br> 4.按Y确定使用该密码<br> 5. 按Y删除匿名账户<br> 6.确定是否需要远程连接，按Y不需要远程连接，非Y需要连接<br> 7. 按Y删除测试库和访问权限<br> 8. 按Y重新加载授权表<br> 9.使用新密码登录数据库<br> <code>mysql -u root -p</code><br> 10. 新建数据库（如命名为wordpress）<br> <code>create database wordpress;</code><br> 11. 新建用户<br> <code>create user &#39;用户名&#39;@&#39;localhost&#39; identified by &#39;用户密码&#39;;</code><br> 12. 赋予用户对数据库wordpress的全部权限<br> <code>grant all privileges on wordpress.* to &#39;用户名&#39;@&#39;localhost&#39;;</code><br> 13. 使配置生效<br> <code>flush privileges;</code><br> 14. \q或exit;退出</li><li>确认nginx和php工作情况<br> 1. 在浏览器输入服务器ip，若能出现nginx默认界面则nginx工作正常<br> 2. 在默认目录中（一般为&#x2F;var&#x2F;www&#x2F;html，若不是则在&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default文件中找root一行）新建phpinfo.php文件并输入保存<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br> 3. 访问ip&#x2F;phpinfo.php，若能打开phpinfo界面则php运行正常（建议测试后删除该文件防止泄露隐私信息）</li><li>下载<a href="https://cn.wordpress.org/latest-zh_CN.tar.gz" title="wordpress">wordpress</a>并解压复制至网页根目录，同时在&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default中把root路径改为网页根目录&#x2F;wordpress</li><li>将WordPress安装目录下的wp-config-sample.php文件复制到wp-config.php文件中，并将wp-config-sample.php文件作为备份<br><code>cp wp-config-sample.php wp-config.php</code></li><li>编辑wp-config.php文件，WordPress网站的数据信息将通过数据库的用户保存在名为wordpress的数据库中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// ** MySQL 设置 - 具体信息来自您正在使用的主机 ** //</span><br><span class="line">/** WordPress数据库的名称 */</span><br><span class="line">define(&#x27;DB_NAME&#x27;, &#x27;数据库名&#x27;);</span><br><span class="line">/** MySQL数据库用户名 */</span><br><span class="line">define(&#x27;DB_USER&#x27;, &#x27;用户名&#x27;);</span><br><span class="line">/** MySQL数据库密码 */</span><br><span class="line">define(&#x27;DB_PASSWORD&#x27;, &#x27;用户密码&#x27;);</span><br><span class="line">/** MySQL主机 */</span><br><span class="line">define(&#x27;DB_HOST&#x27;, &#x27;localhost&#x27;);</span><br></pre></td></tr></table></figure>保存退出</li><li>在wordpress根目录中命令<br><code>chown 用户名:用户组 wordpress路径/wp-content</code><br>赋予上传目标文件夹的上传权限，用户名和用户名组在nginx.conf中查看</li><li>使用<code>whereis php.ini</code>搜索php.ini文件（一般在&#x2F;etc&#x2F;php&#x2F;7.4&#x2F;fpm中），找到<code>upload_max_filesize</code>一行，将2M改为较大的任意数值，取消上传大小限制</li><li>重启nginx和php<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br><span class="line">systemctl restart php+版本号-fpm</span><br></pre></td></tr></table></figure></li><li>浏览器访问ip，不出意外的话即可进入wordpress登录界面，按步骤操作即可</li><li>若仍无权限上传文件则在nginx.conf的server栏中添加<code>client_max_body_size 20M;</code>并重启后应该可以解决</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>劳资好不容易搭好的第二个博客</title>
      <link href="/2022/12/28/%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2/"/>
      <url>/2022/12/28/%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3>]]></content>
      
      
      
        <tags>
            
            <tag> fun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/28/hello-world/"/>
      <url>/2022/12/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
